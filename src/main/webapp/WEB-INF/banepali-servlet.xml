<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	
	
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans     
        		    http://www.springframework.org/schema/beans/spring-beans.xsd
        		    http://www.springframework.org/schema/aop
        		    http://www.springframework.org/schema/aop/spring-aop.xsd 
        		    http://www.springframework.org/schema/mvc 
        		    http://www.springframework.org/schema/mvc/spring-mvc.xsd
        		    http://www.springframework.org/schema/context
        		    http://www.springframework.org/schema/context/spring-context.xsd
        		    http://www.springframework.org/schema/tx
        		    http://www.springframework.org/schema/tx/spring-tx.xsd">


	<!-- ********************************************************************************* -->
	<!-- This is the .xml file through which the DispatcherWebServlet will take 
		the inputs -->
	<!-- DispatcherWebServlet will read this .xml file -->
	<!-- ********************************************************************************* -->



	<!-- Enabling all the spring mvc features -->
	<mvc:annotation-driven />



<!-- Create a session factory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataBaseConnectorUtil" />
		<property name="packagesToScan" value="com.banepali.dataBase.dao.entity" />
		<property name="hibernateProperties">
			<props>
				<!-- below will generate schema for you in the database-->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- below will generate database specific query at runtime -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<!-- Below will print the queries in the console -->
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>
	
	
	<!-- For the Hibernate transactions with the Entity and (queries) Databases and console, 
	we need the transactional Manager Connection-->
	
	
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	


	<bean id="dataBaseConnectorUtil"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3306/keubiko_db" />
		<property name="username" value="root" />
		<property name="password" value="" />
	</bean>



	<bean id="jdbcTemplateForConnection"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataBaseConnectorUtil" />
	</bean>



	<!-- This is the package name where we keep out model/controller/business 
		logics DispatcherWebServlet asks which package you will use of the business 
		logics(Works/methods usually called in the Servlet in SpringPractise Project) 
		This controller is the MODEL(business layer) -->



	<context:component-scan
		base-package="com.banepali.controller" />
	<context:component-scan
		base-package="com.banepali.dataBase.dao" />
	<context:component-scan
		base-package="com.banepali.service" />
	<!-- After the bean is made, for the package "com.banepali.dataBase.dao", 
		then OBJECTS/BEANS of the classes which are made in that package are created 
		and due to which we have the benefits of using the @Autowired -->



	<mvc:resources mapping="/Images/**" location="/Images/" />
	<!-- ** meaning..anything inside the "Images" folder -->
	<mvc:resources mapping="/css/**" location="/css/" />



	<bean id="multipartResolver"
		class="org.springframework.web.multipart.support.StandardServletMultipartResolver" />



	<!-- Hello I am using JSP -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/pages/" />
		<!-- <property name="prefix" value="/" />This takes the called page from 
			the "src/main/webapp", but when you give the path like above, you can make 
			the folder -->
		<property name="suffix" value=".jsp" />
	</bean>


	

	

	<!-- enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven
		transaction-manager="transactionManager" />


</beans> 
